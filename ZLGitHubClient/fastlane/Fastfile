# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
#  desc "Push a new beta build to TestFlight"
#  lane :beta do
#    build_app(workspace: "ZLGitHubClient.xcworkspace", scheme: "ZLGitHubClient")
#    upload_to_testflight
#  end

  desc "build one adhoc release local"
  lane :adhoc do
    match(type: "adhoc",
          readonly: true,
          app_identifier: "com.zm.ZLGitHubClient",
          git_url: "https://github.com/ExistOrLive/ZLGithubClientCer.git")
    gym(workspace: "ZLGitHubClient.xcworkspace",
        scheme: "ZLGitHubClient",
        clean: true,
        include_symbols: true,
        include_bitcode: true,
        output_directory: "./fastlane/ipa",
        output_name: "ZLGitHubClient.ipa")
  end

  desc "build one adhoc release local"
  lane :jenkins_adhoc do
     create_keychain(
      name: ENV['MATCH_KEYCHAIN_NAME'],
      password: ENV['MATCH_PASSWORD'],
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      add_to_search_list: true
    ) 
     match(type: "adhoc",
          readonly: true,
          app_identifier: "com.zm.ZLGitHubClient",
          keychain_name: ENV['MATCH_KEYCHAIN_NAME'],
          keychain_password: ENV['MATCH_PASSWORD'],
          git_url: ENV['MATCH_GITHUB_URL'])
     gym(workspace: "ZLGitHubClient.xcworkspace",
         scheme: "ZLGitHubClient",
         clean: true,
         include_symbols: true,
         include_bitcode: true,
         output_directory: "./fastlane/ipa",
         output_name: "ZLGitHubClient.ipa")
  end

  desc "build one adhoc release on github actions"
  lane :github_action_adhoc do
    create_keychain(
      name: ENV['MATCH_KEYCHAIN_NAME'],
      password: ENV['MATCH_PASSWORD'],
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      add_to_search_list: true
    ) 
    match(type: "adhoc",
          readonly: true,
          app_identifier: "com.zm.ZLGitHubClient",
          keychain_name: ENV['MATCH_KEYCHAIN_NAME'],
          keychain_password: ENV['MATCH_PASSWORD'],
          git_url: ENV['MATCH_GITHUB_URL'])
    gym(workspace: "ZLGitHubClient.xcworkspace",
        scheme: "ZLGitHubClient",
        clean: true,
        include_symbols: true,
        include_bitcode: true,
        output_directory: "./fastlane/ipa/adhoc",
        output_name: "ZLGitHubClient.ipa")
  end


  desc "build one adhoc release on travis"
  lane :travis_adhoc do
    create_keychain(
      name: ENV["MATCH_KEYCHAIN_NAME"],
      password: ENV["MATCH_PASSWORD"],
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      add_to_search_list: true
    ) 
    match(type: "adhoc",
          readonly: true,
          app_identifier: "com.zm.ZLGitHubClient",
          keychain_name: ENV["MATCH_KEYCHAIN_NAME"],
          keychain_password: ENV["MATCH_PASSWORD"],
          git_url: ENV["MATCH_GITHUB_URL"])
    gym(workspace: "ZLGitHubClient.xcworkspace",
        scheme: "ZLGitHubClient",
        clean: true,
        include_symbols: true,
        include_bitcode: true,
        output_directory: "./fastlane/ipa/adhoc",
        output_name: "ZLGitHubClient.ipa")
  end

  desc "build one TestFlight release on travis"
  lane :github_action_testFlight do
    create_keychain(
      name: ENV['MATCH_KEYCHAIN_NAME'],
      password: ENV['MATCH_PASSWORD'],
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      add_to_search_list: true
    ) 
    match(type: "appstore",
          readonly: true,
          app_identifier: "com.zm.ZLGitHubClient",
          keychain_name: ENV['MATCH_KEYCHAIN_NAME'],
          keychain_password: ENV['MATCH_PASSWORD'],
          git_url: ENV['MATCH_GITHUB_URL'])
    match(type: "adhoc",
          readonly: true,
          app_identifier: "com.zm.ZLGitHubClient",
          keychain_name: ENV['MATCH_KEYCHAIN_NAME'],
          keychain_password: ENV['MATCH_PASSWORD'],
          git_url: ENV['MATCH_GITHUB_URL'])
    gym(workspace: "ZLGitHubClient.xcworkspace",
        scheme: "ZLGitHubClient",
        clean: true,
        include_symbols: true,
        include_bitcode: true,
        export_method: "ad-hoc",
        archive_path: "./fastlane/archive/ZLGitHubClient.xcarchive",
        output_directory: "./fastlane/ipa/adhoc",
        output_name: "ZLGitHubClient.ipa")
    gym(workspace: "ZLGitHubClient.xcworkspace",
        scheme: "ZLGitHubClient",
        clean: true,
        include_symbols: true,
        include_bitcode: true,
        skip_build_archive: true,
        archive_path: "./fastlane/archive/ZLGitHubClient.xcarchive",
        output_directory: "./fastlane/ipa/TestFlight",
        output_name: "ZLGitHubClient.ipa",
        export_options: {
          method: "app-store",
          provisioningProfiles: {
            "com.zm.ZLGitHubClient" => "*** AppStore com.zm.ZLGitHubClient"
            }
            })
    pilot(
      username: "18351927991@163.com",
      app_identifier: "com.zm.ZLGitHubClient",
      changelog: "release to TestFlight",
      ipa: "./fastlane/ipa/TestFlight/ZLGitHubClient.ipa"
    )
  end


  desc "build one TestFlight release"
  lane :beta do
    # 配置证书和描述配置文件
    match(type: "appstore",
          readonly: true,
          app_identifier: "com.zm.ZLGitHubClient",
          git_url: "https://github.com/ExistOrLive/ZLGithubClientCer.git")
    # 编译，签名，打包
    gym(workspace: "ZLGitHubClient.xcworkspace",
        scheme: "ZLGitHubClient",
        clean: true,
        include_symbols: true,
        include_bitcode: true)
    # 上传至testflight
    #pilot
  end

  desc "build one release for apple check"
  lane :release do
    # 配置证书和描述配置文件
    match(type: "appstore",
          readonly: true,
          app_identifier: "com.zm.ZLGitHubClient",
          git_url: "https://github.com/ExistOrLive/ZLGithubClientCer.git")
    # 编译，签名，打包
    gym(workspace: "ZLGitHubClient.xcworkspace",
        scheme: "ZLGitHubClient",
        clean: true,
        include_symbols: true,
        include_bitcode: true)
    # 上传至apple store connect
    #deliver
  end

end
