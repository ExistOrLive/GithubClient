# https://www.apollographql.com/docs/ios/installation/

# 查询我待处理的PullRequest
query viewerPullRequest($state:[PullRequestState!],$after:String) {
  viewer{
    pullRequests(states:$state,orderBy:{field:CREATED_AT,direction:DESC
    },after:$after,first:20){
      pageInfo{
        endCursor
        hasNextPage
      }
      nodes{
        title
        state
        number
        author{
          login
        }
        url
        createdAt
        closedAt
        mergedAt
      }
    }
  }
}

# 查询我的top repositories
query viewerTopRepositories($after:String){
  viewer{
    topRepositories(first:10,orderBy:{field:UPDATED_AT,direction:DESC},after:$after){
      pageInfo{
        endCursor
      }
      nodes{
        name
        nameWithOwner
        isPrivate
        description
        forkCount
        stargazerCount
        owner{
          login
          avatarUrl
        }
        primaryLanguage{
          name
        }
        url
      }
    }
  }
}


# 查询我的issues
query viewerIssues($assignee:String,$creator:String,$mentioned:String,$after:String){
  viewer{
    issues(after:$after,orderBy:{field:UPDATED_AT,direction:DESC},first:10,filterBy:{createdBy:$creator,mentioned:$mentioned,assignee:$assignee}){
      pageInfo{
        hasNextPage
        endCursor
        startCursor
      }
      nodes{
        number
        title
        body
        url
        state
        labels(first:5,orderBy:{field: CREATED_AT, direction: DESC}){
          nodes{
            color
            name
          }
        }
        author{
          login
        }
        repository{
          name
          nameWithOwner
        }
        createdAt
        updatedAt
        closedAt
      }
    }
  }
}

# 查询我的组织
query viewerOrgs{
  viewer{
    organizations(first:20){
      totalCount
      edges{
        node{
          login
          avatarUrl
          location
        }
      }
    }
  }
}

# 查询我的工作台信息
query WorkboardInfo{
  viewer{
    issues(first:3,states:OPEN,orderBy:{field:UPDATED_AT,direction:DESC}){
      totalCount
      edges{
        node{
          title
          number
          createdAt
          author{
            login
          }
        }
      }
    }
    pullRequests(first:3,states:OPEN){
      totalCount
      edges{
        node{
          title
          number
          author{
            login
          }
          createdAt
        }
      }
    }
    topRepositories(first:3,orderBy:{field:UPDATED_AT,direction:DESC}){
       edges{
        node{
          nameWithOwner
        }
       }
    }
    bio
    websiteUrl
  }
}

# 查询某个issue
query issueInfo($owner:String!,$name:String!,$number:Int!){
  repository(owner:$owner,name:$name){
    nameWithOwner
    
    issue(number:$number){
      title
      number
      
      author{
        login
        avatarUrl
      }
      
      
      bodyText
      bodyHTML
      state
      
      closed
      closedAt
      createdAt
            
      timelineItems(first:100){
        totalCount,
        nodes{
          __typename
          ... on IssueComment{
            id
            author{
              login
              avatarUrl
            }
            bodyText
            bodyHTML
            url
            lastEditedAt
            publishedAt
          }
          ... on AddedToProjectEvent{
            id
            actor{
              login
              avatarUrl
            }
            createdAt
          }
          ... on AssignedEvent{
            id
            actor{
              login
              avatarUrl
            }
            assignee{
              __typename
              ... on User{
                login
              }
              ... on Bot{
                login
              }
              ... on Mannequin{
                login
              }
              ... on Organization{
                login
              }
            }
          }
          ... on ClosedEvent{
            actor{
              login
            }
          }
          ... on ReopenedEvent{
            actor{
              login
            }
          }
          ... on CommentDeletedEvent{
            actor{
              login
            }
          }
          ... on ConnectedEvent{
            actor{
              login
            }
            source{
              __typename
              ... on PullRequest{
                repository{
                  nameWithOwner
                }
                number
              }
              ... on Issue{
                repository{
                  nameWithOwner
                }
                number
              }
            }
            subject{
              __typename
              ... on PullRequest{
                repository{
                  nameWithOwner
                }
                number
              }
              ... on Issue{
                repository{
                  nameWithOwner
                }
                number
              }
            }
            
          }
          ... on ConvertedNoteToIssueEvent{
            actor{
              login
            }
          }
          ... on ReferencedEvent{
            actor{
              login
            }
            commit{
              commitUrl
              message
            }
          }
          ... on LabeledEvent{
            actor{
              login
            }
            label{
              color
              name
            }
          }
          ... on UnlabeledEvent{
             actor{
              login
            }
            label{
              color
              name
            }
          }
          
          ... on SubscribedEvent{
            actor{
              login
            }
          }
          
          
        }
      }
    }
  }
}
