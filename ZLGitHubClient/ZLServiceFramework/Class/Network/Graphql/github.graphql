# https://www.apollographql.com/docs/ios/installation/

# 查询我待处理的PullRequest
query viewerPullRequest($state:[PullRequestState!],$after:String) {
  viewer{
    pullRequests(states:$state,orderBy:{field:CREATED_AT,direction:DESC
    },after:$after,first:20){
      pageInfo{
        endCursor
        hasNextPage
      }
      nodes{
        title
        state
        number
        author{
          login
        }
        url
        createdAt
        closedAt
        mergedAt
      }
    }
  }
}

# 查询我的top repositories
query viewerTopRepositories($after:String){
  viewer{
    topRepositories(first:10,orderBy:{field:UPDATED_AT,direction:DESC},after:$after){
      pageInfo{
        endCursor
      }
      nodes{
        name
        nameWithOwner
        isPrivate
        description
        forkCount
        stargazerCount
        owner{
          login
          avatarUrl
        }
        primaryLanguage{
          name
        }
        url
      }
    }
  }
}


# 搜索 issue 或者 pr
query searchItem($after: String, $query: String!, $type: SearchType!) {
  search(query: $query, first: 15, type: $type, after: $after) {
    issueCount
    pageInfo {
      hasNextPage
      endCursor
      startCursor
    }
    nodes {
      ... on Issue {
        number
        title
        body
        url
        issueState: state
        labels(first: 5, orderBy: {field: CREATED_AT, direction: DESC}) {
          nodes {
            color
            name
          }
        }
        author {
          login
          url
        }
        repository {
          name
          nameWithOwner
          url
        }
        createdAt
        updatedAt
        closedAt
      }
      ... on PullRequest {
        number
        title
        url
        prState: state
        author {
          login
          url
        }
        repository {
          name
          nameWithOwner
          url
        }
        createdAt
        updatedAt
        closedAt
        mergedAt
      }
      ... on User {
        login
        userName: name
        avatarUrl
        bio
        viewerIsFollowing
        url
      }
      ... on Organization {
        login
        orgName: name
        avatarUrl
        url
      }
      ... on Repository {
        repoName: name
        nameWithOwner
        url
        owner {
          login
          url
        }
        description
        stargazerCount
        forkCount
        primaryLanguage {
          name
          color
        }
      }
    }
  }
}


# 查询我的issues
query viewerIssues($assignee:String,$creator:String,$mentioned:String,$after:String){
  viewer{
    issues(after:$after,orderBy:{field:UPDATED_AT,direction:DESC},first:10,filterBy:{createdBy:$creator,mentioned:$mentioned,assignee:$assignee}){
      pageInfo{
        hasNextPage
        endCursor
        startCursor
      }
      nodes{
        number
        title
        body
        url
        state
        labels(first:5,orderBy:{field: CREATED_AT, direction: DESC}){
          nodes{
            color
            name
          }
        }
        author{
          login
        }
        repository{
          name
          nameWithOwner
        }
        createdAt
        updatedAt
        closedAt
      }
    }
  }
}

# 查询我的组织
query viewerOrgs{
  viewer{
    organizations(first:20){
      totalCount
      edges{
        node{
          login
          avatarUrl
          location
        }
      }
    }
  }
}

# 查询我的工作台信息
query WorkboardInfo{
  viewer{
    issues(first:3,states:OPEN,orderBy:{field:UPDATED_AT,direction:DESC}){
      totalCount
      edges{
        node{
          title
          number
          createdAt
          author{
            login
          }
        }
      }
    }
    pullRequests(first:3,states:OPEN){
      totalCount
      edges{
        node{
          title
          number
          author{
            login
          }
          createdAt
        }
      }
    }
    topRepositories(first:3,orderBy:{field:UPDATED_AT,direction:DESC}){
       edges{
        node{
          nameWithOwner
        }
       }
    }
    bio
    websiteUrl
  }
}

# 查询某个issue
query issueInfo($owner: String!, $name: String!, $number: Int!, $after: String) {
  repository(owner: $owner, name: $name) {
    nameWithOwner
    owner {
      login
      avatarUrl
    }
    issue(number: $number) {
      title
      number
      author {
        login
        avatarUrl
      }
      bodyText
      bodyHTML
      state
      closed
      closedAt
      createdAt
      timelineItems(first: 10, after: $after) {
        totalCount
        pageInfo {
          startCursor
          endCursor
          hasNextPage
        }
        nodes {
          __typename
          ... on AddedToProjectEvent {
            id
            actor {
              login
              avatarUrl
            }
            createdAt
          }
          ... on AssignedEvent {
            id
            actor {
              login
              avatarUrl
            }
            assignee {
              __typename
              ... on User {
                login
              }
              ... on Bot {
                login
              }
              ... on Mannequin {
                login
              }
              ... on Organization {
                login
              }
            }
          }
          ... on ClosedEvent {
            actor {
              login
            }
          }
          ... on CommentDeletedEvent {
            actor {
              login
            }
          }
          ... on ConnectedEvent {
            actor {
              login
            }
          }
          ... on ConvertedNoteToIssueEvent {
            actor {
              login
            }
          }
          ... on CrossReferencedEvent {
            actor {
              login
            }
            target {
              ... on Issue {
                url
                title
                number
                repository {
                  owner {
                    login
                  }
                  name
                }
              }
              ... on PullRequest {
                url
                title
                number
                repository {
                  owner {
                    login
                  }
                  name
                }
              }
            }
          }
          ... on DemilestonedEvent {
            actor {
              login
            }
          }
          ... on DisconnectedEvent {
            actor {
              login
            }
          }
          ... on IssueComment {
            id
            author {
              login
              avatarUrl
            }
            bodyText
            bodyHTML
            url
            lastEditedAt
            publishedAt
          }
          ... on LabeledEvent {
            actor {
              login
            }
            label {
              color
              name
            }
          }
          ... on LockedEvent {
            actor {
              login
            }
          }
          ... on MarkedAsDuplicateEvent {
            actor {
              login
            }
          }
          ... on MentionedEvent {
            actor {
              login
            }
          }
          ... on MilestonedEvent {
            actor {
              login
            }
            milestoneTitle
          }
          ... on MovedColumnsInProjectEvent {
            actor {
              login
            }
          }
          ... on PinnedEvent {
            actor {
              login
            }
          }
          ... on ReferencedEvent {
            actor {
              login
            }
            nullableName: commit {
              commitUrl
              message
              messageHeadline
            }
          }
          ... on RemovedFromProjectEvent {
            actor {
              login
            }
          }
          ... on RenamedTitleEvent {
            actor {
              login
            }
            previousTitle
            currentTitle
          }
          ... on ReopenedEvent {
            actor {
              login
            }
          }
          ... on SubscribedEvent {
            actor {
              login
            }
          }
          ... on TransferredEvent {
            actor {
              login
            }
          }
          ... on UnassignedEvent {
            actor {
              login
            }
          }
          ... on UnlabeledEvent {
            actor {
              login
            }
            label {
              color
              name
            }
          }
          ... on UnlockedEvent {
            actor {
              login
            }
          }
          ... on UnmarkedAsDuplicateEvent {
            actor {
              login
            }
          }
          ... on UnpinnedEvent {
            actor {
              login
            }
          }
          ... on UnsubscribedEvent {
            actor {
              login
            }
          }
          ... on UserBlockedEvent {
            actor {
              login
            }
            subject {
              login
            }
          }
        }
      }
    }
  }
}

# 查询pr的信息
query prInfo($owner: String!, $name: String!, $number: Int!, $after: String) {
  repository(owner: $owner, name: $name) {
    nameWithOwner
    owner {
      login
      avatarUrl
    }
    pullRequest(number: $number) {
      title
      number
      author {
        login
        avatarUrl
      }
      bodyText
      bodyHTML
      state
      baseRefName
      headRefName
      headRepositoryOwner {
        login
        avatarUrl
      }
      baseRepository {
        nameWithOwner
        owner {
          login
        }
      }
      headRepository {
        nameWithOwner
        owner {
          login
        }
      }
      changedFiles
      additions
      deletions
      url
      commits {
        totalCount
      }
      closed
      closedAt
      createdAt
      timelineItems(after: $after, first: 15) {
        pageInfo {
          endCursor
          startCursor
          hasNextPage
        }
        nodes {
          __typename
          ... on AddedToProjectEvent {
            id
            actor {
              login
              avatarUrl
            }
            createdAt
          }
          ... on AssignedEvent {
            id
            actor {
              login
              avatarUrl
            }
            assignee {
              __typename
              ... on User {
                login
              }
              ... on Bot {
                login
              }
              ... on Mannequin {
                login
              }
              ... on Organization {
                login
              }
            }
          }
          ... on AutoMergeEnabledEvent {
            actor {
              login
            }
          }
          ... on AutoMergeDisabledEvent {
            actor {
              login
            }
          }
          ... on AutoMergeDisabledEvent {
            actor {
              login
            }
          }
          ... on AutoRebaseEnabledEvent {
            actor {
              login
            }
          }
          ... on AutoSquashEnabledEvent {
            actor {
              login
            }
          }
          ... on AutomaticBaseChangeFailedEvent {
            actor {
              login
            }
          }
          ... on AutomaticBaseChangeSucceededEvent {
            actor {
              login
            }
          }
          ... on BaseRefChangedEvent {
            actor {
              login
            }
            previousRefName
            currentRefName
          }
          ... on BaseRefDeletedEvent {
            actor {
              login
            }
            baseRefName
          }
          ... on BaseRefForcePushedEvent {
            actor {
              login
            }
          }
          ... on ClosedEvent {
            actor {
              login
            }
          }
          ... on CommentDeletedEvent {
            actor {
              login
            }
          }
          ... on ConnectedEvent {
            actor {
              login
            }
            source {
              __typename
              ... on PullRequest {
                repository {
                  nameWithOwner
                }
                number
              }
              ... on Issue {
                repository {
                  nameWithOwner
                }
                number
              }
            }
            subject {
              __typename
              ... on PullRequest {
                repository {
                  nameWithOwner
                }
                number
              }
              ... on Issue {
                repository {
                  nameWithOwner
                }
                number
              }
            }
          }
          ... on ConvertToDraftEvent {
            actor {
              login
            }
          }
          ... on ConvertedNoteToIssueEvent {
            actor {
              login
            }
          }
          ... on CrossReferencedEvent {
            actor {
              login
            }
            target {
              ... on Issue {
                url
                title
                number
                repository {
                  owner {
                    login
                  }
                  name
                }
              }
              ... on PullRequest {
                url
                title
                number
                repository {
                  owner {
                    login
                  }
                  name
                }
              }
            }
          }
          ... on DemilestonedEvent {
            actor {
              login
            }
          }
          ... on DeployedEvent {
            actor {
              login
            }
          }
          ... on DeploymentEnvironmentChangedEvent {
            actor {
              login
            }
          }
          ... on DisconnectedEvent {
            actor {
              login
            }
          }
          ... on HeadRefDeletedEvent {
            actor {
              login
            }
            headRefName
          }
          ... on HeadRefForcePushedEvent {
            actor {
              login
            }
            beforeCommit {
              messageHeadline
              abbreviatedOid
            }
            afterCommit {
              messageHeadline
              abbreviatedOid
            }
            ref {
              name
            }
          }
          ... on HeadRefRestoredEvent {
            actor {
              login
            }
          }
          ... on IssueComment {
            id
            author {
              login
              avatarUrl
            }
            bodyText
            bodyHTML
            url
            lastEditedAt
            publishedAt
          }
          ... on LabeledEvent {
            actor {
              login
            }
            label {
              color
              name
            }
          }
          ... on LockedEvent {
            actor {
              login
            }
          }
          ... on MarkedAsDuplicateEvent {
            actor {
              login
            }
          }
          ... on MentionedEvent {
            actor {
              login
            }
          }
          ... on MergedEvent {
            actor {
              login
              avatarUrl
            }
            nullableName: commit {
              abbreviatedOid
              message
              messageHeadline
            }
            mergeRefName
          }
          ... on MilestonedEvent {
            actor {
              login
            }
            milestoneTitle
          }
          ... on MovedColumnsInProjectEvent {
            actor {
              login
            }
          }
          ... on PinnedEvent {
            actor {
              login
            }
          }
          ... on PullRequestCommit {
            commit {
              messageHeadline
              author {
                name
                avatarUrl
              }
              abbreviatedOid
              url
            }
            url
            resourcePath
          }
          ... on PullRequestCommitCommentThread {
            commit {
              abbreviatedOid
            }
          }
          ... on PullRequestReview {
            author {
              login
              avatarUrl
            }
          }
          ... on PullRequestReviewThread {
            id
          }
          ... on PullRequestRevisionMarker {
            lastSeenCommit {
              abbreviatedOid
            }
          }
          ... on ReadyForReviewEvent {
            actor {
              login
            }
          }
          ... on ReferencedEvent {
            actor {
              login
            }
            nullableName: commit {
              commitUrl
              message
              messageHeadline
            }
          }
          ... on RemovedFromProjectEvent {
            actor {
              login
            }
          }
          ... on RenamedTitleEvent {
            actor {
              login
            }
            previousTitle
            currentTitle
          }
          ... on ReopenedEvent {
            actor {
              login
            }
          }
          ... on ReviewDismissedEvent {
            actor {
              login
            }
          }
          ... on ReviewRequestRemovedEvent {
            actor {
              login
            }
          }
          ... on ReviewRequestedEvent {
            actor {
              login
            }
            requestedReviewer {
              ... on User {
                login
              }
              ... on Mannequin {
                login
              }
              ... on Team {
                name
              }
            }
          }
          ... on SubscribedEvent {
            actor {
              login
            }
          }
          ... on TransferredEvent {
            actor {
              login
            }
          }
          ... on UnassignedEvent {
            actor {
              login
            }
          }
          ... on UnlabeledEvent {
            actor {
              login
            }
            label {
              color
              name
            }
          }
          ... on UnlockedEvent {
            actor {
              login
            }
          }
          ... on UnmarkedAsDuplicateEvent {
            actor {
              login
            }
          }
          ... on UnpinnedEvent {
            actor {
              login
            }
          }
          ... on UnsubscribedEvent {
            actor {
              login
            }
          }
          ... on UserBlockedEvent {
            actor {
              login
            }
            nullname:subject {
              login
            }
          }
        }
      }
    }
  }
}




